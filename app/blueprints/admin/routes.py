from flask import render_template, redirect, url_for, flash, current_app, request
from flask_login import login_required, current_user
from . import bp
from app.extensions import admin_required
from app.models.property import Property, PropertyImage # üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° PropertyImage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô review.html
from app.models.user import Owner, Admin # üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'User' ‡πÄ‡∏õ‡πá‡∏ô 'Owner' ‡πÅ‡∏•‡∏∞ 'Admin'
# üí° ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
from app.forms.upload import EmptyForm # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSRF token ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° Approve
from app.forms.admin import RejectForm # (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå forms/admin.py ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)

@bp.get("/queue")
@login_required
@admin_required
def queue():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    """
    approval_repo = current_app.extensions["container"]["approval_repo"]
    # üí° ‡πÉ‡∏ä‡πâ get_pending_properties()
    pending_props = approval_repo.get_pending_properties()
    return render_template("admin/queue.html", props=pending_props)

# üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Review)
@bp.route("/property/<int:prop_id>/review", methods=["GET"])
@login_required
@admin_required
def review_property(prop_id: int):
    prop = Property.query.get_or_404(prop_id)
    
    # üí° ‡πÉ‡∏ä‡πâ Owner ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
    owner = Owner.query.get(prop.owner_id) 
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å
    images = prop.images 
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    reject_form = RejectForm()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô)
    approve_form = EmptyForm() 
    
    return render_template("admin/review.html", 
                           prop=prop, 
                           owner=owner,
                           images=images,
                           reject_form=reject_form,
                           approve_form=approve_form)


@bp.route("/property/<int:prop_id>/approve", methods=["POST"])
@login_required
@admin_required
def approve(prop_id: int):
    """
    ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Property
    """
    # üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CSRF token ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    if not EmptyForm(request.form).validate_on_submit():
        flash("CSRF Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "danger")
        return redirect(url_for("admin.queue"))

    approval_service = current_app.extensions["container"]["approval_service"]
    try:
        approval_service.approve_property(
            admin_id=current_user.ref_id, prop_id=prop_id, note=None
        )
        flash(f"‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® '{prop_id}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
    except ValueError as e:
        flash(str(e), "danger")
    return redirect(url_for("admin.queue"))


@bp.route("/property/<int:prop_id>/reject", methods=["POST"])
@login_required
@admin_required
def reject(prop_id: int):
    """
    ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Property
    """
    reject_form = RejectForm()
    
    if reject_form.validate_on_submit():
        note = reject_form.note.data
        approval_service = current_app.extensions["container"]["approval_service"]
        try:
            approval_service.reject_property(
                admin_id=current_user.ref_id, prop_id=prop_id, note=note
            )
            flash(f"‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® '{prop_id}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
        except ValueError as e:
            flash(str(e), "danger")
        return redirect(url_for("admin.queue"))
    
    # ‡∏´‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Review ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", "danger")
    return redirect(url_for("admin.review_property", prop_id=prop_id))


@bp.route("/logs")
@login_required
@admin_required
def logs():
    """
    ‡πÅ‡∏™‡∏î‡∏á AuditLog ‡πÅ‡∏ö‡∏ö paginate
    """
    page = request.args.get("page", 1, type=int)
    approval_service = current_app.extensions["container"]["approval_service"]
    log_data = approval_service.get_audit_logs(page=page)
    return render_template("admin/logs.html", **log_data)