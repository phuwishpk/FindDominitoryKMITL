# File: app/blueprints/auth/routes.py

from flask import render_template, redirect, url_for, flash, current_app, request
from . import bp
# ‚¨áÔ∏è [app/forms/auth.py], [app/models/user.py]
from app.forms.auth import OwnerRegisterForm, OwnerLoginForm, AdminLoginForm, CombinedLoginForm
from app.models.user import Owner, Admin
from flask_login import login_required
from werkzeug.security import generate_password_hash

@bp.route("/owner/register", methods=["GET","POST"])
def owner_register():
    # ‚¨áÔ∏è [app/forms/auth.py] ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    form = OwnerRegisterForm()
    if form.validate_on_submit():
        # ‚¨áÔ∏è [app/__init__.py] ‡∏î‡∏∂‡∏á AuthService ‡∏à‡∏≤‡∏Å DI container
        svc = current_app.extensions["container"]["auth_service"]
        svc.register_owner(form.data)
        flash("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        # ‚¨áÔ∏è [app/blueprints/auth/routes.py] Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
        return redirect(url_for("auth.login"))
    # ‚¨áÔ∏è [app/templates/auth/owner_register.html] ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    return render_template("auth/owner_register.html", form=form)

@bp.route("/login", methods=["GET","POST"])
def login():
    # Admin seeding logic (‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    if not Admin.query.filter_by(username="admin").first():
        a = Admin(username="admin", password_hash=generate_password_hash("admin"), display_name="Administrator")
        from app.extensions import db
        db.session.add(a); db.session.commit()

    # ‚¨áÔ∏è [app/forms/auth.py] ‡πÉ‡∏ä‡πâ CombinedLoginForm
    form = CombinedLoginForm(role=request.args.get("role","owner"))
    if form.validate_on_submit():
        role = form.role.data
        # ‚¨áÔ∏è [app/__init__.py] ‡∏î‡∏∂‡∏á AuthService ‡∏à‡∏≤‡∏Å DI container
        svc = current_app.extensions["container"]["auth_service"]
        
        if role == "owner":
            # ‚¨áÔ∏è [app/services/auth_service.py] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å verify_owner ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Owner object
            owner = svc.verify_owner(form.username.data, form.password.data)
            if owner:
                # ‚¨áÔ∏è [app/services/auth_service.py] ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Owner object ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤
                svc.login_owner(owner, remember=form.remember.data)
                # ‚¨áÔ∏è [app/blueprints/owner/routes.py] Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
                return redirect(url_for("owner.dashboard"))
            flash("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Owner) ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else: # admin
            # ‚¨áÔ∏è [app/services/auth_service.py] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å verify_admin
            admin = svc.verify_admin(form.username.data, form.password.data)
            if admin:
                # ‚¨áÔ∏è [app/services/auth_service.py] ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Admin object
                svc.login_admin(admin, remember=form.remember.data)
                # ‚¨áÔ∏è [app/blueprints/admin/routes.py] Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Admin Queue
                return redirect(url_for("admin.queue"))
            flash("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Admin)")
            
    # ‚¨áÔ∏è [app/templates/auth/login.html] ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° login
    return render_template("auth/login.html", form=form)

# üõ†Ô∏è [app/blueprints/auth/routes.py] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å @bp.get ‡πÄ‡∏õ‡πá‡∏ô @bp.route ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á GET/POST (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 405)
@bp.route("/logout", methods=["GET", "POST"])
@login_required
def logout():
    current_app.extensions["container"]["auth_service"].logout()
    # ‚¨áÔ∏è [app/blueprints/public/routes.py] Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Public Index
    return redirect(url_for("public.index"))
