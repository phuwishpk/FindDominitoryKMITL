# File: app/__init__.py
from flask import Flask, send_from_directory
# üõ†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ import 'babel' ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
from .extensions import db, migrate, login_manager, babel, limiter, csrf
from .config import Config

from .blueprints.public import bp as public_bp
from .blueprints.owner import bp as owner_bp
from .blueprints.admin import bp as admin_bp
from .blueprints.auth import bp as auth_bp
from .blueprints.api import bp as api_bp

# ‚¨áÔ∏è [app/repositories/sqlalchemy] ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Repositories
from .repositories.sqlalchemy.user_repo_sql import SqlUserRepo
from .repositories.sqlalchemy.property_repo_sql import SqlPropertyRepo
from .repositories.sqlalchemy.approval_repo_sql import SqlApprovalRepo

# ‚¨áÔ∏è [app/services] ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Services
from .services.auth_service import AuthService
from .services.property_service import PropertyService
from .services.search_service import SearchService
from .services.approval_service import ApprovalService
from .services.upload_service import UploadService
from .services.dashboard_service import DashboardService # üõ†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°: DashboardService

# üõ†Ô∏è [app/forms/upload.py] ‡∏ï‡πâ‡∏≠‡∏á Import EmptyForm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Context Processor
from .forms.upload import EmptyForm 

def register_dependencies(app: Flask):
    container = {}
    container["user_repo"] = SqlUserRepo()
    container["property_repo"] = SqlPropertyRepo()
    container["approval_repo"] = SqlApprovalRepo()
    
    # üõ†Ô∏è [app/services/upload_service.py] ‡∏™‡∏£‡πâ‡∏≤‡∏á UploadService ‡∏Å‡πà‡∏≠‡∏ô
    container["upload_service"] = UploadService(app.config.get("UPLOAD_FOLDER", "uploads"))

    # üõ†Ô∏è [app/services/auth_service.py] ‡∏™‡πà‡∏á upload_service ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô AuthService
    container["auth_service"] = AuthService(
        user_repo=container["user_repo"],
        upload_service=container["upload_service"],
    )
    
    container["property_service"] = PropertyService(container["property_repo"])
    container["search_service"] = SearchService(container["property_repo"])
    
    # üõ†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ApprovalService ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö approval_repo ‡πÅ‡∏•‡∏∞ property_repo ‡πÄ‡∏õ‡πá‡∏ô argument
    container["approval_service"] = ApprovalService(
        container["approval_repo"],
        container["property_repo"]
    )
    
    # üõ†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°: DashboardService ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö Repositories ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    container["dashboard_service"] = DashboardService(
        user_repo=container["user_repo"],
        property_repo=container["property_repo"],
        approval_repo=container["approval_repo"],
    )
    
    if not hasattr(app, "extensions"):
        app.extensions = {}
    app.extensions["container"] = container

def create_app() -> Flask:
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_object(Config)

    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    babel.init_app(app) # üõ†Ô∏è ‡πÉ‡∏ä‡πâ babel ‡∏ó‡∏µ‡πà import ‡∏°‡∏≤
    limiter.init_app(app)
    csrf.init_app(app)

    with app.app_context():
        register_dependencies(app)

    # ‚¨áÔ∏è [app/blueprints] ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Blueprints
    app.register_blueprint(public_bp)
    app.register_blueprint(owner_bp, url_prefix="/owner")
    app.register_blueprint(admin_bp, url_prefix="/admin")
    app.register_blueprint(auth_bp, url_prefix="/auth")
    app.register_blueprint(api_bp, url_prefix="/api")
    
    # üõ†Ô∏è [app/__init__.py] ‡πÄ‡∏û‡∏¥‡πà‡∏° Context Processor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ UndefinedError
    @app.context_processor
    def inject_forms():
        """‡∏™‡πà‡∏á empty_form ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ó‡∏∏‡∏Å Template Context (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö csrf_token ‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ)"""
        # ‚¨áÔ∏è [app/forms/upload.py]
        return dict(empty_form=EmptyForm())
    
    # üõ†Ô∏è [app/__init__.py] ‡πÄ‡∏û‡∏¥‡πà‡∏°: Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    @app.route("/uploads/<path:filename>")
    def serve_uploads(filename):
        return send_from_directory(
            app.config["UPLOAD_FOLDER"],
            filename,
            as_attachment=False,
        )

    @app.get("/health")
    def health():
        return {"ok": True}

    @app.cli.command("seed_amenities")
    def seed_amenities():
        # ‚¨áÔ∏è [app/models/property.py]
        from app.models.property import Amenity
        from app.extensions import db
        data = [
            ("pet","‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á","Pets allowed"),
            ("ac","‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®","Air conditioning"),
            ("guard","‡∏£‡∏õ‡∏†.","Security guard"),
            ("cctv","‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV","CCTV"),
            ("fridge","‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô","Refrigerator"),
            ("bed","‡πÄ‡∏ï‡∏µ‡∏¢‡∏á","Bed"),
            ("heater","‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô","Water heater"),
            ("internet","‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï","Internet"),
            ("tv","‡∏ó‡∏µ‡∏ß‡∏µ","TV"),
            ("sofa","‡πÇ‡∏ã‡∏ü‡∏≤","Sofa"),
            ("wardrobe","‡∏ï‡∏π‡πâ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤","Wardrobe"),
            ("desk","‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô","Desk"),
        ]
        for code, th, en in data:
            if not Amenity.query.filter_by(code=code).first():
                db.session.add(Amenity(code=code, label_th=th, label_en=en))
        db.session.commit()
        print("Seeded amenities ‚úÖ")

    @app.cli.command("seed_sample")
    def seed_sample():
        # ‚¨áÔ∏è [app/models/user.py], [app/models/property.py]
        from app.models.user import Owner, Admin
        from app.models.property import Property
        from app.extensions import db
        from werkzeug.security import generate_password_hash
        
        # Seed Owner
        if not Owner.query.filter_by(email="owner@example.com").first():
            o = Owner(full_name_th="‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", citizen_id="1101700203451",
                      email="owner@example.com", password_hash=generate_password_hash("password"))
            db.session.add(o); db.session.commit()
            
            # Seed Property
            p = Property(owner_id=o.id, dorm_name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å", room_type="studio",
                         rent_price=6500, lat=13.7563, lng=100.5018,
                         workflow_status="approved")
            db.session.add(p); db.session.commit()
            
        # Seed Admin
        if not Admin.query.filter_by(username="admin").first():
            a = Admin(username="admin", password_hash=generate_password_hash("admin"), display_name="Administrator")
            db.session.add(a); db.session.commit()
            
        print("Seeded sample data ‚úÖ")

    return app
